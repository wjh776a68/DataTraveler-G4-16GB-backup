#pragma once
//#pragma warning(disable : 4996)
//#include<stdio.h>
//#include<stdlib.h>
#include<math.h>
#include"__Treecodes.h"

//#include<windows.h>
//#include"virtualscreen.h"



void find_f1(int*,int, int);
void Show_Array(int*,int);
void f1()
{
	int choice, value;
	int a[] = { 1,2,3,4,6,7,8,9,10,11,12,13,17,18,19,20,24,25,26,30,35,40,45,50,80,100 };
	int b[] = { 2,3,5,7,8,10,12,15,18,20,22,25,30,35,40,45,50,55,60,80,100 };

	printf("请输入所要使用的数组: [1/2]\n");
	printf("第一组数据：(1,2,3,4,6,7,8,9,10,11,12,13,17,18,19,20,24,25,26,30,35,40,45,50,?80,100)\n");
	printf("第二组数据：(2,3,5,7,8,10,12,15,18,20,22,25,30,35,40,45,50,55,60,80,100)\n");
	scanf("%d", &choice);
	//printf("%d\n", sizeof(a) / sizeof(int));
	printf("请输入所要查找的元素:\n");
	scanf("%d", &value);
	switch (choice)
	{
	case 1:
		Show_Array(a,sizeof(a)/sizeof(int));
		find_f1(a, sizeof(a) / sizeof(int),value);
		
		break;
	case 2:
		Show_Array(b,sizeof(b) / sizeof(int));
		find_f1(b,sizeof(a) / sizeof(int), value);
		
	}
}

//void show(int *SourceArray,int SourceArray_Len,int start,int number,int div=4)
//{
//	
//	int x=1,count=0;
//	while(x*=2)
//	{
//		if(x>=SourceArray_Len)
//			break;
//		count++;
//	}
//	
//	DRAW *screen = drawstart(div*(2*x+1), 2*count+1);
//	
//	int i,h=2*x;
//	printf(":::::%d %d %d %d ",number,div,h,x);
//	while(h>=0)
//	{
//		for(i=0;i<number;i++)
//		{
//			addpixel(screen,start+div*i,h+2,char2int(' '));
//			addpixel(screen,start+div*i,h,SourceArray[start+div*i]);
//			printf("%d ",start+div*i);
//			drawsmart(screen);
//			getchar();
//			
//		}
//		addline(screen,start,h-1,start+number*div,h-1);
//		start=start+div/4;
//		div=div*2;
//		number=(number-1)/2;
//		h-=2;
//	}
//	
//	drawsmart(screen);
//
//	drawclose(screen);
//	
////	if(range>=1)
////	{
//	//	addpixel(screen,center , floor, SourceArray[center]);
//	//	printf("%d::",range);
//		//addpixel(screen,center+1 , floor+1, (int)'\\');
//		//drawline(screen,center+1,floor+1,center+range/2,floor+range/2);		
//		//addpixel(screen,center-1 , floor+1, (int)'/');
//		//addline(screen,center-range/2-1,floor+1,center+range/2+1,floor+1);
//		//addpixel(screen,center-range/2-1, floor+2,char2int('|'));
//		//addpixel(screen,center+range/2-1, floor+2,char2int('|'));
//		//drawline(screen,center-1,floor+1,center-range/2,floor+range/2);		
//	//	if(center+range/2+1<SourceArray_Len+2 && range>1)
//	//		show(screen,SourceArray,SourceArray_Len,center+range/4+1,(range+1)/2,floor+2);
//	//	if(center-range/2-1>=2 && range>1)
//	//		show(screen,SourceArray,SourceArray_Len,center-range/4-1,(range+1)/2,floor+2);
////	}
//	
//	//printf("%d ", *((screen->sp)+2));
//	//addpixel(screen, 30, 3, 'a');
//	//drawline(screen,0,0,50,50);
//
//	
//}


void buildorderedtree(TreeNode *&newtree,int *SourceArray,int front,int rear,int argument)
{
	if(front<=rear)
	{
		//if(argument==3)
	//	{
	//		newtree=new atr(*(SourceArray+(int)(front+rear)/2));
			//newtree->val=*(SourceArray+(int)(front+rear)/2);
			//newtree->Lchild=newtree->Rchild=NULL;	
		//}
	//	else
	//	{
			atr *newnode=new atr(*(SourceArray+(int)(front+rear)/2));
		//	printf("%d ",(front+rear)/2);
			//newnode->Lchild=newnode->Rchild=NULL;		
			//newnode->val=*(SourceArray+(int)(front+rear)/2);
			if(argument==1)
				newtree->Lchild=newnode;
			else if(argument==2)
				newtree->Rchild=newnode;
			else if(argument==3)
				newtree=newnode;
	//	}
		
			
		buildorderedtree(newnode,SourceArray,front,(int)(front+rear)/2-1,1);
		buildorderedtree(newnode,SourceArray,(int)(front+rear)/2+1,rear,2);
	}

}




void Show_Array(int *SourceArray,int SourceArray_Len)
{

	//int SourceArray_Len = sizeof(SourceArray)/sizeof(int);
	int i = 0,start=0,number=SourceArray_Len,head=0;
	int *newSourceArray=(int * )malloc(SourceArray_Len*(sizeof(int)));
	printf("元素下标: ");
	while (i < SourceArray_Len)
	{
		printf("%-3d ",i);
		i++;
	}
	printf("\n");
	printf("元素的值: ");
	i = 0;
	while (i < SourceArray_Len)
	{
		printf("%-3d ", SourceArray[i]);
		i++;
	}
	printf("\n");

	printf("二分查找的判定树如图所示：\n");
	

	//adjustorder(SourceArray,newSourceArray, SourceArray_Len,1,head);
	// 打印二叉树bt
	
	atr *newtree=NULL;
	buildorderedtree(newtree,SourceArray,0,SourceArray_Len-1,3);
//	CreateBiTree(newtree, SourceArray, SourceArray_Len);
//	printf("%d ",newtree->Rchild->val); 
	//newtree= createTreeFromArray(SourceArray, SourceArray_Len, -1);
	bt_print(newtree);
	//addline(screen,0,0,3,0);	
	//show(SourceArray,SourceArray_Len,start,number); 	
}

void find_f1(int *SourceArray, int SourceArray_Len, int value)
{
	//int SourceArray_Len=sizeof(SourceArray)/ sizeof(int);
	int i = 0, j = SourceArray_Len-1;
	while (i <= j)
	{
		printf("比较的元素下标为%d,其值为%d\n", (i + j) / 2,*(SourceArray+(i+j)/2));
		if (SourceArray[(i + j) / 2]==value)
		{
			printf("所要查找的元素下标为%d\n", (i + j) / 2);
			break;
			
		}
		else if (SourceArray[(i + j) / 2] < value)
		{
			i = (i + j) / 2;
			i++;
		}
		else if (SourceArray[(i + j) / 2] > value)
		{
			j = (i + j) / 2;
			j--;
		}
	}
	if (i >= j)
	{
		printf("未找到\n");
	}

	


}



void insertwithorder(atr *otr,int value,bool finished)
{
	if (value < otr->val)
	{
			if (otr->Lchild == NULL)
			{
				//tr* newnode = new tr;
				//newnode->data = value;
				atr *newnode=new atr(value);
				finished = 1;
				//newnode->Lchild = newnode->Rchild = NULL;
				otr->Lchild = newnode;
			}
			else
			{
				insertwithorder(otr->Lchild, value, finished);
			}
	}	
	else if (value > otr->val)
	{
			if (otr->Rchild == NULL)
			{
				//tr* newnode = new tr;
				//newnode->data = value;
				atr *newnode=new atr(value);	
				finished = 1;
			//	newnode->Lchild = newnode->Rchild = NULL;
				otr->Rchild = newnode;
			}
			else
			{
				insertwithorder(otr->Rchild, value, finished);
			}
	}
	else
	{
		printf("OH NO! How can you make two elements with same value.!!!\n");
		finished = 1;
	}
}

void showorderedtree(atr *otr)
{
	if (otr != NULL)
	{
		showorderedtree(otr->Lchild);
		printf("%d ",otr->val);
		showorderedtree(otr->Rchild);
	}
}

void showorderedtree2(atr *otr)
{
	if (otr != NULL)
	{
		printf("%d ",otr->val);
		showorderedtree2(otr->Lchild);		
		showorderedtree2(otr->Rchild);
	}
}

void cleanorderedtree(atr* otr)
{
	if (otr != NULL)
	{
		cleanorderedtree(otr->Lchild);
		cleanorderedtree(otr->Rchild);
		free(otr);
	}
}


void f2()
{
	int a;
	//tr* otr = (tr*)malloc(sizeof(tr));
	//otr->Lchild = otr->Rchild = NULL;
	
	printf("请输入序列(-1退出):\n");	
	scanf("%d", &a);
	//otr->data = a;
	atr *otr=new atr(a);
	while(a!=-1) {
		scanf("%d", &a);
		if (a != -1)
		{
			insertwithorder(otr, a,0);
			bt_print(otr);
		}
			
	}
	printf("生成的二叉树为:\n");
	bt_print(otr);
	//printf("排序完成的中序序列为：\n");
	//showorderedtree(otr);
	printf("\n");
	printf("开始释放所用内存空间:\n");
	cleanorderedtree(otr);
	printf("释放完毕\n");
	fflush(stdin);
}

void arraytotree(atr *tree,int a)
{
	//if (&a !=NULL)
	//{
		if (a > tree->val)
		{
			if (tree->Rchild == NULL)
			{
				//tr* newnode = (tr*)malloc(sizeof(tr));
				//newnode->data = a;
			//	newnode->Lchild = newnode->Rchild = NULL;
				atr *newnode=new atr(a);
				tree->Rchild = newnode;
			}
			else
			{
				arraytotree(tree->Rchild, a);
			}

		}
		else if (a < tree->val)
		{
			if (tree->Lchild == NULL)
			{
				//tr* newnode = (tr*)malloc(sizeof(tr));
				//newnode->data = a;
				//newnode->Lchild = newnode->Rchild = NULL;
				atr *newnode=new atr(a);
				tree->Lchild = newnode;
			}
			else
			{
				arraytotree(tree->Lchild, a );
			}
		}
		else
		{
			printf("OH NO! How can you make two elements with same value.!!!\n");
			
		}
	//}
}

void findorderedtree(atr*& otr,atr *&ret,int value,int &finished)
{
	if (otr != NULL && finished==0)
	{
		printf("正在查找%d是否与之匹配\n",otr->val);
		if (otr->val == value)
		{
			finished = 1;
			
			ret = otr;
			
		}
		else if(otr->val > value)
		findorderedtree(otr->Lchild,ret,value,finished);
		//printf("%d ", otr->data);		
		else if (otr->val < value)
		findorderedtree(otr->Rchild,ret,value,finished);
	}

}

void f3()
{
	int a[] = { 1,2,3,4,6,7,8,9,10,11,12,13,17,18,19,20,24,25,26,30,35,40,45,50,80,100 };
	//int b[] = { 2,3,5,7,8,10,12,15,18,20,22,25,30,35,40,45,50,55,60,80,100 };
	int find,i,finished=0;
	int arrayend = sizeof(a) / sizeof(int);
	//tr* tree = (tr*)malloc(sizeof(tr));
	//tr *ret=NULL;
	atr *tree=new atr(*a);
	
	atr *ret=NULL;
	//if(*a!=NULL)
	//	tree->val = a[0];
//	tree->Lchild = tree->Rchild = NULL;
	//for (i = 1; i < arrayend; i++)
	//{
	//	arraytotree(tree, *(a+i));
	//}
	buildorderedtree(tree, a, 0, arrayend-1, 3);
	printf("已将<1>中第一组数据填入\n");
	//showorderedtree(tree);
	bt_print(tree);
	
	//printf("\n");
	printf("请输入要查找的值:(-1退出)");
	do {
		scanf("%d", &find);
		fflush(stdin);
		if (find != -1)
		{
			findorderedtree(tree,ret,find,finished);
			if (finished!=1)
			{
				printf("未找到\n");
			}
			else
				printf("已找到该节点，其值为%d\n", ret->val);		
		}
		finished=0;
	} while (find != -1);
	printf("开始释放所用内存空间:\n");
	cleanorderedtree(tree);
	printf("释放完毕\n");
	fflush(stdin);

}

void delorderedtree(atr* otr,  int value, int& finished)
{
	//printf("%d %d %d %d", yuan->data, yuan->Lchild->data, yuan->Lchild->Lchild->data, yuan->Lchild->Lchild->Lchild->data);
	atr* lastparent = otr;//,*llastparent=otr;
	bool direction=FALSE;
	if (otr != NULL && finished == 0)
	{
		if (otr->val == value)
		{
			while (otr->Rchild != NULL || otr->Lchild != NULL)
			{
				while (otr ->Rchild!= NULL)
				{
					//printf("%d ", otr->data);							
				//	int tmp=
			//		printf("%d->%d\n", otr->data, tmp);
					otr->val = otr->Rchild->val; 
				//	printf("=%d\n", otr->data);					
				//	llastparent = lastparent;
					lastparent = otr;
					direction = TRUE;
					otr = otr->Rchild;
				}			
			//	if (otr->Lchild == NULL)
			//	{
			//		break;
			//	}				
				while (otr ->Lchild!= NULL)
				{		
				//	int tmp= 	
					//printf("%d ", otr->data);
				//	printf("%d->%d\n", otr->data, tmp);
					otr->val =	otr->Lchild->val;	 		
				//	printf("=%d\n", otr->data);				
				//	llastparent = lastparent;
					lastparent = otr;
					direction = FALSE;
					otr = otr->Lchild;
				}			
			//	if (otr->Rchild == NULL)
			//	{
			////		break;
			//	}			
			}
			if (direction == TRUE)
				lastparent->Rchild = NULL;
			else if (direction == FALSE)
				lastparent->Lchild = NULL;
			//else
				//llastparent->Rchild =llastparent->Lchild = NULL;
			//printf("::%d::", otr->data);
			//free(otr);
			
			finished = 1;			
		}
		if(finished==0 && otr->val > value)
			delorderedtree(otr->Lchild, value, finished);
		//printf("%d ", otr->data);		
		if(finished==0 && otr->val < value)
			delorderedtree(otr->Rchild, value, finished);
	}
//	while (yuan != NULL)
	//{
	//	printf("%d ", yuan->data);
	//	yuan = yuan->Lchild;
	//}
	
}




atr* getSuccessor(atr* delNode) {
	atr* curr = delNode->Rchild;
	atr* successor = curr;
	atr* sucParent = NULL;
	while (curr != NULL) {
		sucParent = successor;
		successor = curr;
		curr = curr->Lchild;
	}
	if (successor != delNode->Rchild) {
		//将后继节点的子节点（仅仅可能有右节点）替补到后继节点的位置上
		sucParent->Lchild = successor->Rchild;
		//将被删除的右孩子连接到后继节点的右节点上
		successor->Rchild = delNode->Rchild;
		//将被删除的左孩子连接到后继节点的右节点上（就是用后继节点替换掉被删除的节点）
	}
	return successor;
}

boolean delnode(int key, atr*& root) {
	atr* curr = root;//保存当前节点
	atr* parent = root;//保存当前节点父节点
	boolean isLeft = true;//记录是否是左几点
	//定位到将被删除的节点 
	while (key != curr->val) {
		if (key <= curr->val) {
			isLeft = true;//经过左节点
			if (curr->Lchild != NULL) {
				parent = curr;
				curr = curr->Lchild;
			}
		}
		else {
			isLeft = false;//经过右节点
			if (curr->Rchild != NULL) {
				parent = curr;
				curr = curr->Rchild;
			}
		}
		if (curr == NULL) {
			return false;
		}
	}
	//假设被删除节点是叶子节点
	if (curr->Lchild == NULL && curr->Rchild == NULL) {
		if (curr == root) {
			root = NULL;
		}
		else if (isLeft) {
			parent->Lchild = NULL;
		}
		else {
			parent->Rchild = NULL;
		}
		//假设被删除节点仅仅有左节点
	}
	else if (curr->Rchild == NULL) {
		if (curr == root) {
			root = root->Lchild;
		}
		else if (isLeft) {
			parent->Lchild = curr->Lchild;
		}
		else {
			parent->Rchild = curr->Lchild;
		}
		//假设被删除节点仅仅有右节点
	}
	else if (curr->Lchild == NULL) {
		if (curr == root) {
			root = root->Rchild;
		}
		else if (isLeft) {
			parent->Lchild = curr->Rchild;
		}
		else {
			parent->Rchild = curr->Rchild;
		}
	}
	else {
		atr* successor = getSuccessor(curr);
		//将后继节点与被删除的父节点进行连接，完毕整个替换过程
		if (curr == root) {
			root = successor;
		}
		else if (curr == parent->Lchild) {
			parent->Lchild = successor;
		}
		else {
			parent->Rchild = successor;
		}
		successor->Lchild = curr->Lchild;
	}
	return true;

}















void f4()
{
	int a[] = { 1,2,3,4,6,7,8,9,10,11,12,13,17,18,19,20,24,25,26,30,35,40,45,50,80,100 };
	//int b[] = { 2,3,5,7,8,10,12,15,18,20,22,25,30,35,40,45,50,55,60,80,100 };
	int find, i, finished = 0;
	int arrayend = sizeof(a) / sizeof(int);
	//tr* tree = (tr*)malloc(sizeof(tr));
	atr *tree=new atr(a[0]);
//	tr* yuan=tree; 
	atr* ret = NULL;
//	if (*a != NULL)
//		tree->data = a[0];
//	tree->Lchild = tree->Rchild = NULL;
	//for (i = 1; i < arrayend; i++)
	//{
	//	arraytotree(tree, *(a + i));
	//}
	buildorderedtree(tree, a, 0, arrayend-1, 3);
	printf("已将<1>中第一组数据填入\n");
	bt_print(tree);
	//showorderedtree(tree);
	printf("\n");	
	do {
		printf("请输入要删除的值:(-1退出)");	
		scanf("%d", &find);
		fflush(stdin);
		if (find != -1)
		{
			findorderedtree(tree, ret, find, finished);		
			//delorderedtree(tree, find, finished);
			if (finished != 1)
			{
				printf("未找到\n");
			}
			else
			{
				delnode(find, tree);
				printf("已删除该节点，删除后二叉树为\n");
				bt_print(tree);
				//showorderedtree(tree);
				printf("\n");
			}
				
		}
		finished = 0;
	} while (find != -1);
	printf("开始释放所用内存空间:\n");
	cleanorderedtree(tree);
	printf("释放完毕\n");
	fflush(stdin);
}

void treeheight(atr *btr,int &maxfloor,int floor=0)
{
	if(btr!=NULL)
	{
		treeheight(btr->Lchild,maxfloor,floor+1);
		treeheight(btr->Rchild,maxfloor,floor+1);
		
	}
	else
	{
		if(floor>maxfloor)
			maxfloor=floor;
	}
}

//void keepbalanced_worker(atr*& yuan,atr* btr,atr* lbtr,atr* llbtr ,atr* lllbtr ,int &change)
//{
//	if (btr != NULL)
//	{
//		if(change==0)
//		keepbalanced_worker(yuan,btr->Lchild,btr,lbtr,llbtr,change);
//		if(change==0)
//		keepbalanced_worker(yuan,btr->Rchild, btr, lbtr, llbtr,change);
//		if(change==0)
//		{
//			int maxfloorL = 0, maxfloorR = 0;
//			treeheight(btr->Lchild, maxfloorL);
//			treeheight(btr->Rchild, maxfloorR);
//			bt_print(yuan);
//			printf("node name:%d\n", btr->val);
//			printf("node length %d %d\n",maxfloorL,maxfloorR);
//			printf("node data:%d %d %d %d\n", lllbtr!=NULL?lllbtr->val:-1, llbtr!=NULL?llbtr->val:-1, lbtr!=NULL?lbtr->val:-1, btr!=NULL?btr->val:-1);
//			if (maxfloorL > maxfloorR + 1 || maxfloorL < maxfloorR - 1)
//			{
//				change = 1;
//				if (lllbtr != NULL)
//				{
//					if (lllbtr->Rchild == llbtr)
//					{
//						if (llbtr->Rchild == lbtr && lbtr->Rchild == btr)  //RR
//						{
//							lllbtr->Rchild = lbtr;
//							llbtr->Rchild = lbtr->Lchild;
//							lbtr->Lchild = llbtr;
//							printf("RR");
//							//	getchar();
//						}
//						else if (llbtr->Rchild == lbtr && lbtr->Lchild == btr)  //RL
//						{
//							lllbtr->Rchild = btr;
//							lbtr->Lchild = btr->Rchild;
//							llbtr->Rchild = btr->Lchild;
//							btr->Lchild = llbtr;
//							btr->Rchild = lbtr;
//							printf("RL");
//							//	getchar();
//						}
//						else if (llbtr->Lchild == lbtr && lbtr->Rchild == btr)//LR
//						{
//							lllbtr->Rchild = btr;
//							lbtr->Rchild = btr->Lchild;
//							llbtr->Lchild = btr->Rchild;
//							btr->Rchild = llbtr;
//							btr->Lchild = lbtr;
//							printf("LR");
//							//	getchar();
//						}
//						else if (llbtr->Lchild == lbtr && lbtr->Lchild == btr)//LL
//						{
//							lllbtr->Rchild = lbtr;
//							llbtr->Lchild = lbtr->Rchild;
//							lbtr->Rchild = llbtr;
//							printf("LL");
//							//	getchar();
//						}
//						else
//						{
//							printf("error,what happened 1 ?");
//								getchar(); 
//						}
//					}
//					else if (lllbtr->Lchild == llbtr)
//					{
//						if (llbtr->Rchild == lbtr && lbtr->Rchild == btr)  //RR
//						{
//							lllbtr->Lchild = lbtr;
//							llbtr->Rchild = lbtr->Lchild;
//							lbtr->Lchild = llbtr;
//							printf("RR");
//							//	getchar();
//						}
//						else if (llbtr->Rchild == lbtr && lbtr->Lchild == btr)  //RL
//						{
//							lllbtr->Lchild = btr;
//							lbtr->Lchild = btr->Rchild;
//							llbtr->Rchild = btr->Lchild;
//							btr->Lchild = llbtr;
//							btr->Rchild = lbtr;
//							printf("RL");
//							//	getchar();
//						}
//						else if (llbtr->Lchild == lbtr && lbtr->Rchild == btr)//LR
//						{
//							lllbtr->Lchild = btr;
//							lbtr->Rchild = btr->Lchild;
//							llbtr->Lchild = btr->Rchild;
//							btr->Rchild = llbtr;
//							btr->Lchild = lbtr;
//							printf("LR");
//							//	getchar();
//						}
//						else if (llbtr->Lchild == lbtr && lbtr->Lchild == btr)//LL
//						{
//							lllbtr->Lchild = lbtr;
//							llbtr->Lchild = lbtr->Rchild;
//							lbtr->Rchild = llbtr;				
//							printf("LL");
//							//	getchar();
//						}
//						else
//						{
//							printf("error,what happened 2 ?");
//								getchar(); 
//						}
//					}
//					else
//					{
//						printf("error,what happened?");
//							getchar(); 
//					}
//				}
//				else if (llbtr != NULL)
//				{
//					if (yuan == llbtr)
//					{
//						if (llbtr->Rchild == lbtr && lbtr->Rchild == btr)  //RR
//						{
//							yuan = lbtr;
//							llbtr->Rchild = lbtr->Lchild;
//							lbtr->Lchild = llbtr;
//							printf("RR");
//							//	getchar();
//						}
//						else if (llbtr->Rchild == lbtr && lbtr->Lchild == btr)  //RL
//						{
//							yuan = btr;
//							lbtr->Lchild = btr->Rchild;
//							llbtr->Rchild = btr->Lchild;
//							btr->Lchild = llbtr;
//							btr->Rchild = lbtr;
//							printf("RL");
//							//	getchar();
//						}
//						else if (llbtr->Lchild == lbtr && lbtr->Rchild == btr)//LR
//						{
//							yuan = btr;
//							lbtr->Rchild = btr->Lchild;
//							llbtr->Lchild = btr->Rchild;
//							btr->Rchild = llbtr;
//							btr->Lchild = lbtr;
//							printf("LR");
//							//	getchar();
//						}
//						else if (llbtr->Lchild == lbtr && lbtr->Lchild == btr)//LL
//						{
//							yuan = lbtr;
//							llbtr->Lchild = lbtr->Rchild;
//							lbtr->Rchild = llbtr;
//							
//							printf("LL");
//							//	getchar();
//						}
//						else
//						{
//							printf("error,what happened 1 ?");
//								getchar(); 
//						}
//					}
//					else
//					{
//						printf("error,what happened?");
//							getchar(); 
//					}
//					//llbtr->Rchild = btr;
//					//lbtr->Rchild = btr->Lchild;
//					//btr->Lchild = lbtr;
//					printf("the1exit\n");
//				}
//				else if (lbtr != NULL)
//				{
//					atr* tmp = lbtr;
//					lbtr = lbtr->Rchild;
//					tmp->Rchild = lbtr->Lchild;
//					lbtr->Lchild = tmp;
//					yuan = lbtr;
//					printf("the2exit\n");
//				}
//				else if (btr != NULL)
//				{
//					if (btr->Rchild != NULL)
//					{
//						atr *tmp = btr->Rchild->Lchild;
//						btr->Rchild->Lchild = yuan;
//						yuan = btr->Rchild;
//						btr->Rchild = tmp;
//						
//					}
//					else if (btr->Lchild != NULL)
//					{
//						atr* tmp = btr->Lchild->Rchild;
//						btr->Lchild->Rchild = yuan;
//						yuan = btr->Lchild;
//						btr->Lchild = tmp;
//	
//					}
//						
//					printf("the3exit\n");
//					
//				}
//			}
//		}
//	
//
//	}
//	
//}

//void keepbalanced(atr *&yuan)
//{
//	fflush(stdin);
//	int maxfloorL=0,maxfloorR=0;
//	atr *lbtr=NULL,*llbtr=NULL,*lllbtr=NULL,*btr=yuan;
//	//printf("::%d ",btr->data);
//	while(btr!=NULL)
//	{
//		maxfloorL=0,maxfloorR=0;
//		treeheight(btr->Lchild,maxfloorL);
//		treeheight(btr->Rchild,maxfloorR);
//	//	printf("node:%d l:%d r:%d\n",btr->data,maxfloorL,maxfloorR);
//		if(maxfloorL==maxfloorR+1 && maxfloorL==maxfloorR-1)
//		{
//			
//		//	printf("::%d ",lllbtr!=NULL?lllbtr->data:-1);
//		//	printf("::%d ",llbtr!=NULL?llbtr->data:-1);
//		//	printf("::%d ",lbtr!=NULL?lbtr->data:-1);
//		//	printf("::%d ",btr!=NULL?btr->data:-1);
//			if(lllbtr!=NULL)
//			{	
//				if(lllbtr->Rchild=llbtr)
//				{
//					if(llbtr->Rchild==lbtr && lbtr->Rchild==btr)  //RR
//					{
//						lllbtr->Rchild=lbtr;
//						llbtr->Rchild=lbtr->Lchild;
//						lbtr->Lchild=llbtr;
//					//	printf("RR(%d %d %d)\n(%d)",lllbtr->Rchild->data,lbtr->Lchild->data,lbtr->Rchild->data,llbtr->Rchild);
//					//	getchar();
//					}
//					else if(llbtr->Rchild==lbtr && lbtr->Lchild==btr)  //RL
//					{
//						lllbtr->Rchild=btr;
//						lbtr->Lchild=btr->Rchild;
//						llbtr->Rchild=btr->Lchild;
//						btr->Lchild=llbtr;
//						btr->Rchild=lbtr;
//					//	getchar();
//					}
//					else if(llbtr->Lchild==lbtr && lbtr->Rchild==btr)//LR
//					{
//						lllbtr->Rchild=lbtr;
//						llbtr->Lchild=lbtr->Rchild;
//						lbtr->Rchild=llbtr;
//					//	getchar();
//					}
//					else if(llbtr->Lchild==lbtr && lbtr->Lchild==btr)//LL
//					{
//						lllbtr->Rchild=btr;
//						lbtr->Rchild=btr->Lchild;
//						llbtr->Lchild=btr->Rchild;
//						btr->Rchild=llbtr;
//						btr->Lchild=lbtr;
//					//	getchar();
//					}
//					else
//					{
//						printf("error,what happened 1 ?");
//					}
//				}
//				else if(lllbtr->Lchild=llbtr)
//				{
//					if(llbtr->Rchild==lbtr && lbtr->Rchild==btr)  //RR
//					{
//						lllbtr->Lchild=lbtr;
//						llbtr->Rchild=lbtr->Lchild;
//						lbtr->Lchild=llbtr;
//						//	getchar();
//					}
//					else if(llbtr->Rchild==lbtr && lbtr->Lchild==btr)  //RL
//					{
//						lllbtr->Lchild=btr;
//						lbtr->Lchild=btr->Rchild;
//						llbtr->Rchild=btr->Lchild;
//						btr->Lchild=llbtr;
//						btr->Rchild=lbtr;
//						//	getchar();
//					}
//					else if(llbtr->Lchild==lbtr && lbtr->Rchild==btr)//LR
//					{
//						lllbtr->Lchild=lbtr;
//						llbtr->Lchild=lbtr->Rchild;
//						lbtr->Rchild=llbtr;
//						//	getchar();
//					}
//					else if(llbtr->Lchild==lbtr && lbtr->Lchild==btr)//LL
//					{
//						lllbtr->Lchild=btr;
//						lbtr->Rchild=btr->Lchild;
//						llbtr->Lchild=btr->Rchild;
//						btr->Rchild=llbtr;
//						btr->Lchild=lbtr;
//						//	getchar();
//					}
//					else
//					{
//					printf("error,what happened 2 ?");
//					}
//				}			
//				else
//				{
//					printf("error,what happened?");
//				}
//			}
//			else if(llbtr!=NULL)
//			{
//				llbtr->Rchild=btr;
//				lbtr->Rchild=btr->Lchild;
//				btr->Lchild=lbtr;
//			}			
//			else if(lbtr!=NULL)
//			{
//				atr *tmp=lbtr;
//				lbtr=lbtr->Rchild;
//				tmp->Rchild=lbtr->Lchild;
//				lbtr->Lchild=tmp;
//				yuan=lbtr;
//			}			
//			//break;
//		}
//		/*else if(maxfloorL<maxfloorR)
//		{
//			lllbtr=llbtr;
//			llbtr=lbtr;
//			lbtr=btr;
//			btr=btr->Rchild;
//		}
//		else if(maxfloorL>maxfloorR)
//		{
//			lllbtr=llbtr;
//			llbtr=lbtr;
//			lbtr=btr;
//			btr=btr->Lchild;
//		}
//		else if (maxfloorL == maxfloorR)
//		{
//			int tmaxfloorL, tmaxfloorR;
//			treeheight(btr->Lchild->Lchild, tmaxfloorL);
//			treeheight(btr->Lchild->Rchild, tmaxfloorR);
//			if (maxfloorL != maxfloorR)
//			{
//				btr = btr->Lchild;
//			}
//			treeheight(btr->Lchild->Lchild, tmaxfloorL);
//			treeheight(btr->Lchild->Rchild, tmaxfloorR);
//			if (maxfloorL != maxfloorR)
//			{
//				btr = btr->Rchild;
//			}
//		}*/
//	}
//}

void balancedtree(atr *btr,int newdata)
{
//	tr *yuan=btr;
	if(newdata<btr->val)
	{
		if(btr->Lchild==NULL)
		{
			//tr *newnode=new tr;
			atr *newnode=new atr(newdata);
			btr->Lchild=newnode;
			//newnode->Lchild=newnode->Rchild=NULL;
			//newnode->data=newdata;
		}
		else
		{
			balancedtree(btr->Lchild,newdata);	
		}		
	}
	else if(newdata>btr->val)
	{
		if(btr->Rchild==NULL)
		{
			//tr *newnode=new tr;
			atr *newnode=new atr(newdata);
			btr->Rchild=newnode;
			//newnode->Lchild=newnode->Rchild=NULL;
			//newnode->data=newdata;
		}
		else
		{
			balancedtree(btr->Rchild,newdata);	
		
		}		
	}
	else
	{
		printf("error,two same value\n");
	}

}


void keepbalanced_worker(atr*& yuan,atr *btr,atr *lbtr,int &change)
{
	if (btr != NULL)
	{
		if(change==0)
		keepbalanced_worker(yuan,btr->Lchild,btr,change);
		if(change==0)
		keepbalanced_worker(yuan,btr->Rchild,btr,change);
		if(change==0)
		{
			
			int maxfloorL = 0, maxfloorR = 0;
			treeheight(btr->Lchild, maxfloorL);
			treeheight(btr->Rchild, maxfloorR);
			bt_print(yuan);
		//	printf("node name:%d\n", btr->val);
		//	printf("node length %d %d\n",maxfloorL,maxfloorR);
		//	printf("%d %d:::\n",yuan!=NULL?yuan->val:999,lbtr!=NULL?lbtr->val:999);
		//	printf("node data:%d %d %d %d\n", lllbtr!=NULL?lllbtr->val:-1, llbtr!=NULL?llbtr->val:-1, lbtr!=NULL?lbtr->val:-1, btr!=NULL?btr->val:-1);
			if(maxfloorL-maxfloorR>1)
			{
				change=1;
				atr *sbtr=btr->Lchild;
				int smaxfloorL = 0, smaxfloorR = 0;
				treeheight(sbtr->Lchild, smaxfloorL);
				treeheight(sbtr->Rchild, smaxfloorR);
			//	printf("snode name:%d\n", sbtr->val);
		//		printf("snode length %d %d\n",smaxfloorL,smaxfloorR);
				
				if(smaxfloorL>smaxfloorR)  //LL
				{
					if(yuan==btr)
					{
						yuan=sbtr;
						btr->Lchild=sbtr->Rchild;
						sbtr->Rchild=btr;
					//	printf("11::\n");
					}
				//	else if(yuan->Lchild==btr)
				//	{
				//		yuan=btr;
				//		lbtr->Lchild=btr->Rchild;
				//		yuan->Rchild=lbtr;
				//		printf("12::\n");
				//	}
					
					else if(lbtr->Lchild==btr)
					{
						lbtr->Lchild=sbtr;
						btr->Lchild=sbtr->Rchild;
						sbtr->Rchild=btr;
					//	printf("13::\n");
					}
					else if(lbtr->Rchild==btr)
					{
						lbtr->Rchild=sbtr;
						btr->Lchild=sbtr->Rchild;
						sbtr->Rchild=btr;
					//	printf("14::\n");
					}
					else
					{
						printf("LL");
						getchar();
					}
					
				}
				else if(smaxfloorL<smaxfloorR)  //LR
				{
					if(yuan==btr)
					{
						yuan=sbtr;
						btr->Lchild=sbtr->Rchild;
						sbtr->Rchild=btr;
					//	printf("21::\n");
					}
				//	else if(yuan->Lchild==btr)
				//	{
				//		yuan=sbtr;
				//		lbtr->Lchild=sbtr->Rchild;
				//		btr->Rchild=sbtr->Lchild;
				//		yuan->Lchild=btr;
				//		yuan->Rchild=lbtr;
				//		printf("22::\n");
				//	}
				
					else if(lbtr->Lchild==btr)
					{
						lbtr->Lchild=sbtr->Rchild;
						btr->Lchild=lbtr->Lchild->Rchild;
						sbtr->Rchild=lbtr->Lchild->Lchild;
						lbtr->Lchild->Rchild=btr;
						lbtr->Lchild->Lchild=sbtr;
					//	printf("23::\n");
					}
					else if(lbtr->Rchild==btr)
					{
						lbtr->Rchild=sbtr->Rchild;
						btr->Lchild=lbtr->Rchild->Rchild;
						sbtr->Rchild=lbtr->Rchild->Lchild;
						lbtr->Rchild->Rchild=btr;
						lbtr->Rchild->Lchild=sbtr;
					//	printf("24::\n");
					}
					else
					{
						printf("LR");
						getchar();
					}
				}			
				else
				{
					printf("warning 1 !!");
					getchar();
				}
			}
			else if(maxfloorR-maxfloorL>1)
			{
				change=1;
				atr *sbtr=btr->Rchild;
				int smaxfloorL = 0, smaxfloorR = 0;
				treeheight(sbtr->Lchild, smaxfloorL);
				treeheight(sbtr->Rchild, smaxfloorR);
			//	printf("snode name:%d\n", sbtr->val);
			//	printf("snode length %d %d\n",smaxfloorL,smaxfloorR);
				if(smaxfloorL>smaxfloorR)   //RL
				{
					if(yuan==btr)
					{
						yuan=sbtr;
						btr->Rchild=sbtr->Lchild;
						sbtr->Lchild=btr;
					//	printf("31::\n");
					}
					
				//	else if(yuan->Rchild==btr)
			//		{
			//			yuan=sbtr;
				//		lbtr->Rchild=sbtr->Lchild;
			//			btr->Lchild=sbtr->Rchild;
			//			yuan->Rchild=btr;
				//  	yuan->Lchild=lbtr;
				//		printf("32::\n");
				//	}
					else if(lbtr->Lchild==btr)
					{
						lbtr->Lchild=sbtr->Lchild;
						btr->Rchild=lbtr->Lchild->Lchild;
						sbtr->Lchild=lbtr->Lchild->Rchild;
						lbtr->Lchild->Lchild=btr;
						lbtr->Lchild->Rchild=sbtr;
					//	printf("33::\n");
					}
					else if(lbtr->Rchild==btr)
					{
						lbtr->Rchild=sbtr->Lchild;
						btr->Rchild=lbtr->Rchild->Lchild;
						sbtr->Lchild=lbtr->Rchild->Rchild;
						lbtr->Rchild->Lchild=btr;
						lbtr->Rchild->Rchild=sbtr;
					//	printf("34::\n");
					}
					else
					{
						printf("RL");
						getchar();
					}
				}
				else if(smaxfloorL<smaxfloorR)  //RR
				{
					if(yuan==btr)
					{
						yuan=sbtr;
						btr->Rchild=sbtr->Lchild;
						sbtr->Lchild=btr;
					//	printf("41::\n");
					}
				//	else if(yuan->Rchild==btr)
				//	{
				//		yuan=btr;
				//		lbtr->Rchild=btr->Lchild;
				//		yuan->Lchild=lbtr;
			//			printf("42::\n");
				//	}
					else if(lbtr->Lchild==btr)
					{
						lbtr->Lchild=sbtr;
						btr->Rchild=sbtr->Lchild;
						sbtr->Lchild=btr;
					//	printf("43::\n");
					}
					else if(lbtr->Rchild==btr)
					{
						lbtr->Rchild=sbtr;
						btr->Rchild=sbtr->Lchild;
						sbtr->Lchild=btr;
					//	printf("44::\n");
					}
					else
					{
						printf("RR");
						getchar();
					}
				}
				else
				{
					printf("warning 2 !!");
					getchar();
				}
				
			}
		}

	}
	
}

void f5()
{
	char path[30]={0};
	int newdata;
	//tr* btr=new tr;
	//btr->Lchild=btr->Rchild=NULL;
	atr* btr=new atr(0);
	printf("请输入数据文件路径:");	
	scanf("%s",path);	
	
	FILE *fp=fopen(path,"r");
	if (fp != NULL)
	{
		if (!feof(fp))
		{
			fscanf(fp, "%d ", &newdata);
			btr->val = newdata;
			//printf("平衡二叉树为 :\n");
			//bt_print(btr);
			//showorderedtree(btr);	
			// printf("\n");
			//showorderedtree2(btr);	
			//printf("\n");
		}

		while (!feof(fp))
		{
			int change = 0;
			fscanf(fp, "%d ", &newdata);
			balancedtree(btr, newdata);
			do
			{
				change = 0;
				keepbalanced_worker(btr, btr, btr,  change);
				getchar();
			}		
			while (change == 1);
			//printf("平衡二叉树为 :\n");
			//bt_print(btr);
			//showorderedtree(btr);
			//printf("\n");
			//showorderedtree2(btr);
			//printf("\n");
			printf("平衡二叉树为 :\n");
			bt_print(btr);
			getchar();
		}
		
		fclose(fp);
		printf("平衡二叉树为 :\n");
		bt_print(btr);
	}
	else
	{
		printf("未找到该文件\n");
	}
	
	
	
	
}

void createfile()
{
	char path[32]={0};
	int x;
	printf("请输入保存路径:");
	scanf("%s",path);
	FILE *fp=fopen(path,"w+");
	printf("请输入数组数字：\n");
	do
	{
		scanf("%d",&x);
		fflush(stdin);
		if(x!=-1)
			fprintf(fp,"%d ",x);		
	}while(x!=-1);
	printf("输入完成\n");
	rewind(fp);
	fclose(fp);
	fflush(stdin);
}





